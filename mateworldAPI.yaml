openapi: 3.0.0
info:
  title: Mateworld Ecommerce
  description: This is an ecommerce API with user login
  contact:
    email: tomasgeneroso90@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:3000

components:
  schemas:
    user:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        birthday:
          type: string
        country:
          type: string
        city:
          type: string
        address:
          type: string
        postalCode:
          type: string
        addressDetails:
          type: string
        role:
          type: string
      required:
        - email
        - password
        - name
        - surname
        - birthday
        - country
        - city
        - address
        - postalCode
        - role
      example:
        email: "user@example.com"
        password: "hashed_password"
        name: "John"
        surname: "Doe"
        birthday: "1990-01-01"
        country: "Country"
        city: "City"
        address: "Street 123"
        postalCode: "12345"
        addressDetails: "Apartment 456"
        role: "user"
          
  parameters:
    token:
      name: token
      in: header
      description: JWT Token for authentication
      required: true
      schema:
        type: string
        format: jwt
        
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: Enter JWT token obtained from the login endpoint

paths:
  /login:
    post:
      summary: User Login
      description: login and authenticate user with username and password 
      security:
        - jwt: []
      parameters:
        - $ref: '#/components/parameters/token'
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
          
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/user'
                  
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                example:
                  message: "Invalid credentials"
                  success: false
        
  /register:
    post:
      summary: User Registration
      description: Endpoint to register a new user.
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                  userAdedd:
                    $ref: '#/components/schemas/user'
              example:
                message: "User registered successfully"
                success: true
                
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Invalid registration data"
  /dashboard:
    get:
      summary: get user dashboard
      description: get user dashboard (profile, shipments, last shoppings) information with auth verification
      security:
        - jwt: []
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Successful retrieval of user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
                  shoppings:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        elements:
                          type: array
                          items:
                            type: string
                      example:
                        // Ejemplo de compra
                  shipments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        idShopping:
                          type: string
                
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
                example:
                  message: "Unauthorized"
                  error: "User not found"